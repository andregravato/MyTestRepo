//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace MiscTestApplication.DataAdapter.Model
{
    public partial class SubEntity
    {
        #region Primitive Properties
    
        public virtual long Id
        {
            get;
            set;
        }
    
        public virtual long MainEntity1Id
        {
            get { return _mainEntity1Id; }
            set
            {
                if (_mainEntity1Id != value)
                {
                    if (MainEntity1 != null && MainEntity1.Id != value)
                    {
                        MainEntity1 = null;
                    }
                    _mainEntity1Id = value;
                }
            }
        }
        private long _mainEntity1Id;
    
        public virtual string Name
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual MainEntity1 MainEntity1
        {
            get { return _mainEntity1; }
            set
            {
                if (!ReferenceEquals(_mainEntity1, value))
                {
                    var previousValue = _mainEntity1;
                    _mainEntity1 = value;
                    FixupMainEntity1(previousValue);
                }
            }
        }
        private MainEntity1 _mainEntity1;

        #endregion
        #region Association Fixup
    
        private void FixupMainEntity1(MainEntity1 previousValue)
        {
            if (previousValue != null && previousValue.SubEntities.Contains(this))
            {
                previousValue.SubEntities.Remove(this);
            }
    
            if (MainEntity1 != null)
            {
                if (!MainEntity1.SubEntities.Contains(this))
                {
                    MainEntity1.SubEntities.Add(this);
                }
                if (MainEntity1Id != MainEntity1.Id)
                {
                    MainEntity1Id = MainEntity1.Id;
                }
            }
        }

        #endregion
    }
}
